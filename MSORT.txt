#include <QCoreApplication>
#include <iostream>
#include <stdlib.h>
#include <math.h>
#include <stdio.h>
#include <time.h>
#define Etype int
using namespace std;
int             LT(int a, int b)
{
    return a < b;
}

void            MMERGE(int A[], int B[], size_t l, size_t m, size_t r)
{
    size_t          i = l;
    size_t          j = m + 1;
    size_t          k = l;

    while ((i <= m) && (j <= r)) {
        if (LT(A[i], A[j]))
            B[k++] = A[i++];
        else
            B[k++] = A[j++];
    }

    while (i <= m) {
        B[k++] = A[i++];
    }
    while (j <= r) {
        B[k++] = A[j++];
    }

    for (k = l; k <= r; k++) {
        A[k] = B[k];
    }
}


void            MSORT(int A[], int B[], size_t l, size_t r)
{
    size_t          m;
    if (l < r) {

        m = ((l + r) >> 1);
        MSORT(A, B, l, m);
        MSORT(A, B, m + 1, r);
        MMERGE(A, B, l, m, r);
    }
}

int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);
    const int n=10000;
          int A[n],B[n];
          int l,r;
        for (int i=0;i<n; i++)
            A[i]=1+rand()%1000;
        cout << "first 10 elements:" << endl;
    for (int i=0;i<10;i++)
       cout << A[i] << "  ";
        cout << endl;
    cout << "last 10 elements:" << endl;
    for (int i=9990;i<10000;i++)
       cout << A[i] << "  ";
        cout << endl;
        clock_t start = clock();
        l = 0; r = n - 1;
         MSORT(A, B, l, r);
        clock_t end = clock();
          double seconds = (double)(end - start) / CLOCKS_PER_SEC;
          printf("The time: %f seconds\n", seconds);
         cout << "Sorted selection first 10 elements:" << endl;
        for (int i=0;i<10;i++)
        cout << A[i] << "  ";
        cout << endl;
        cout << "Sorted selection last 10 elements:" << endl;
    for (int i=9990;i<10000;i++)
       cout << A[i] << "  ";
        cout << endl;

        system("pause");
    return a.exec();
}